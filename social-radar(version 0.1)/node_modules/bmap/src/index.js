"use strict";

const GMapsApi = require("google-maps");



class GMap {

  constructor(configObject) {

    this.groupElements = [];
    this.groups = {};
    this.groupOrder = [];
    this.mapInstance = {};
    this.activeGroup = 0;
    this.focusMarker = {};
    this.infoWindow = false;


    if (configObject.querySelector == null) {
      throw new Error("querySelector is not set.");
    }

    if (configObject.apiKey == null) {
      throw new Error("apiKey is not set.");
    }

    if (configObject.mapConfig.center == null &&
      configObject.mapConfig.center.lat == null &&
      configObject.mapConfig.center.long == null
    ) {
      throw new Error("center.lat & center.long is not set.");
    }


    this.configObject = configObject;

    // groupBy (property | nested array)


    this.init()
    .then((mapsApi) => {
      return this.processMapGroups(mapsApi);
    })
    .catch(err => {
      console.log(err);
    });

  }


  init() {

    return new Promise((resolve) => {

      GMapsApi.load(google => {

        let mapsApi = google.maps;
        let mountElement = document.querySelector(this.configObject.querySelector);
        let mapConfig = this.configObject.mapConfig;
        let mapOptions = {
          zoom: mapConfig.zoom,
          center: new mapsApi.LatLng(mapConfig.center.lat, mapConfig.center.long)
        };

        this.mapInstance = new mapsApi.Map(mountElement, mapOptions);

        this.infoWindow = new mapsApi.InfoWindow({
            content: 'loading'
        });

        resolve(mapsApi);
      });

    });
  }

  processMapGroups(mapsApi) {

    return new Promise((resolve) => {

      if (this.configObject.focusElement) {
        let focusElement = document.querySelector(this.configObject.focusElement);
        let $focusElement = $(focusElement);
        let focusPoint = $focusElement.data("marker");
        let focusMarkerIcon = $focusElement.data("marker-icon");
        this.focusMarker = this.createMarker(mapsApi, focusPoint, focusMarkerIcon);
      }





      this.groupElements = document.querySelectorAll(this.configObject.groupElements);

      for (var i = 0; i < this.groupElements.length; ++i) {

        let element = this.groupElements[i];
        let $element = $(element);
        let points = $element.data("markers");
        let id = parseInt($element.data("id"));
        let markerIcon = $element.data("marker-icon");

        let markers = [];

        points.forEach((point) => {
          markers.push(this.createMarker(mapsApi, point, markerIcon, false));
        });


        this.groups[element.dataset.id] = {
          id: id,
          markers: markers,
          visible: false
        };

        this.groupOrder.push(id);

        this.addEvent(mapsApi, element, id);

      }

      if (this.configObject.firstGroupOn) {
        let firstGroupkey = this.groupOrder.shift();
        let bounds = new mapsApi.LatLngBounds();
        this.markerVisible(mapsApi, this.groups[firstGroupkey].markers, true, bounds);
        this.groups[firstGroupkey].visible = true;
        this.activeGroup = firstGroupkey;
        this.groupOrder = this.groupOrder.unshift(firstGroupkey);
      }

      resolve(mapsApi);

    });
  }


  createMarker(mapsApi, point, markerIcon, setVisible = true) {
    let lat = parseFloat(point.latitude);
    let Lng = parseFloat(point.longitude);

    let position = new mapsApi.LatLng(lat, Lng);

    let marker = new mapsApi.Marker({
      position: position,
      map: this.mapInstance,
      icon: markerIcon
    });

    var infoContent = `<div class="mapPopUp">`;
    infoContent += `<p>${point.title}</p>`;

    //let fromDirection = `http://maps.google.com/maps?f=d&hl=en&geocode=&time=&date=&ttype=&saddr=${lat},${Lng}`;
    //<a target="_BLANK" href="${fromDirection}">From</a> -
    let toDirection = `http://maps.google.com/maps?f=d&hl=en&geocode=&time=&date=&ttype=&saddr=&daddr=${lat},${Lng}`;
    infoContent += `<p><a target="_BLANK" href="${toDirection}" style="color: #000;">Directions</a></p>`;

    if (point.description !== "" && point.description !== null) {
      infoContent += `<p>${point.description}</p>`;
    }

    infoContent += `</div>`;

    mapsApi.event.addListener(marker, 'click', () => {
        this.infoWindow.setContent(infoContent);
        this.infoWindow.open(this.mapInstance, marker);
    });

    let bounds = new mapsApi.LatLngBounds();

    this.markerVisible(mapsApi, marker, setVisible, bounds);
    return marker;

  }


  markerVisible(mapsApi, markers, setVisible, bounds = false) {

    this.infoWindow.close();

    if (Array.isArray(markers)) {

      markers.forEach((element) => {
        if (bounds) {
          bounds.extend(element.getPosition());
        }
        element.setVisible(setVisible);
      });

      if (bounds) {
        bounds.extend(this.focusMarker.getPosition());
        this.mapInstance.fitBounds(bounds);
      }
    } else {
      markers.setVisible(setVisible);
    }
  }


  addEvent(mapsApi, element, id){

    element.addEventListener("click", this.eventHandler(mapsApi, id));
    element.addEventListener("touchstart", this.eventHandler(mapsApi, id));
  }

  eventHandler(mapsApi, id) {
      return (event) => {
          this.menuEventActions(event, mapsApi, id);
      };
  }

  menuEventActions(event, mapsApi, id) {
    event.preventDefault();

    if (this.activeGroup !== id) {
      this.markerVisible(mapsApi, this.groups[this.activeGroup].markers, false);
      this.groups[this.activeGroup].visible = false;
    }

    this.activeGroup = id;
    let visible = (this.groups[id].visible) ? false : true;

    let bounds = (visible) ? new mapsApi.LatLngBounds() : false;
    this.markerVisible(mapsApi, this.groups[id].markers, visible, bounds);

  }

}




module.exports = GMap;
